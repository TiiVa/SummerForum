@page "/login"


@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager navigationManager
@inject UserService userService


@using SummerForum.DataTransferContract.DTOs
@using SummerForum.Client.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

<h3>Login</h3>

<EditForm Model="UserDto" OnValidSubmit="Authenticate" FormName="loginForm">
	<DataAnnotationsValidator/>
	<Div class="mb-3 text-center flex-column">
		<h3>Login</h3>

	</Div>
	<Div class="mb-3">
		<Label>User name</Label>
		<InputText @bind-Value="UserDto.UserName" class="form-control" placeholder="Username"></InputText>
		<ValidationMessage For="() => UserDto.UserName" />
	</Div>
	<Div class="mb-3">
		<Label>Password</Label>
		<InputText @bind-Value="UserDto.Password" class="form-control" placeholder="Password" type="password"></InputText>
		<ValidationMessage For="() => UserDto.Password" />
	</Div>
	<Div class="mb-3 text-center">
		<span class="text-danger">@errorMessage</span>

	</Div>
	<Div class="mb-3">
		<button type="submit" class="btn btn-primary">Login</button>
	</Div>
</EditForm>





@code {



	[CascadingParameter]
	public HttpContext? HttpContext { get; set; }

	[SupplyParameterFromForm] public UserDto UserDto { get; set; } = new();

	private List<UserDto> Users { get; set; } = new();

	private string? errorMessage;

	private async Task Authenticate()
	{
		var users = await userService.GetManyAsync(0, 10);

		Users = users.ToList();

		var userAccount = Users.FirstOrDefault(u => u.UserName == UserDto.UserName);

		if (userAccount is null || userAccount.Password != UserDto.Password)
		{
			errorMessage = "Invalid username or password";
			return;
		}

		var claims = new List<Claim>
		{
			new Claim(ClaimTypes.Name, UserDto.UserName),
			new Claim(ClaimTypes.Role, userAccount.Role)
		};

		var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
		var principal = new ClaimsPrincipal(identity);
		await HttpContext.SignInAsync(principal);
		navigationManager.NavigateTo("/");
	}


}